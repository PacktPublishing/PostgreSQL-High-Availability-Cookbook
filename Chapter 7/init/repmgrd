#!/bin/bash

# Debian/Ubuntu Heading
### BEGIN INIT INFO
# Provides: repmgr
# Required-Start: $local_fs $remote_fs $network $time
# Required-Stop: $local_fs $remote_fs $network $time
# Default-Start: 2 3 4 5
# Default-Stop: 0 1 6
# Short-Description: repmgr replication management service script
### END INIT INFO

# RHEL-based heading:
# chkconfig: 2345 86 14
# description: repmgr replication management service script

# Start with some basic variable assignments. To satisfy either Debian or
# RHEL systems, we will check the /etc/default and /etc/sysconfig directories
# for variable overrides. Variables that can be changed in these scripts
# include:
#
#   * DISABLE     : Set to 1 to disable service start. 0 by default.
#   * CONF_DIR    : Directory where config files are stored.
#   * LOG_DIR     : Directory where service logs should be created.
#   * BIN_DIR     : Directory where the repmgr binary resides.
#   * SVC_USER    : Name of the system user that will run repmgr.
#   * EXTRA_OPTS  : Arbitrary options to pass to repmgr service.

NAME=repmgr

DISABLE=0
CONF_DIR=/etc
LOG_DIR=/var/log/$NAME
BIN_DIR=/usr/bin
SVC_USER=postgres
EXTRA_OPTS='--verbose --monitoring-history'

# Now inject the overrides:

if [ -f /etc/sysconfig/$NAME ]; then
    source /etc/sysconfig/$NAME
fi

if [ -f /etc/default/$NAME ]; then
    source /etc/default/$NAME
fi

# With user-configured variables defined, set a few helper variables to act
# as shortcuts.

SVC_CONF="$CONF_DIR/$NAME.conf"
SVC_LOG="$LOG_DIR/$NAME.log"
SVC_CMD="$BIN_DIR/repmgrd -f $SVC_CONF -p /var/run/$NAME.pid -d"

# Make sure the logging directory exists, and this process can write to its
# own PID file.

if [ $(whoami) == 'root' ] && [ ! -d $LOG_DIR ]; then
    mkdir -p $LOG_DIR
    chown $SVC_USER $LOG_DIR
fi

if [ $(whoami) == 'root' ] && [ ! -f /var/run/$NAME.pid ]; then
    touch /var/run/$NAME.pid
    chown $SVC_USER /var/run/$NAME.pid
fi

############################
# BEGIN FUNCTION DEFINITIONS
############################

##
# Return the PID of the repmgr service
#
get_pid()
{
    PID=$(pgrep -f "$SVC_CMD")
    echo $PID
}

##
# Start the repmgr service
#
# This start function is fully LSB compliant. Exit codes are defined such
# that they are compatible with scripts that function based on exit codes.
#
start()
{
    PID=$(get_pid)

    # No reason to start the service or perform any other checks if it's
    # already running. Exit with status 0 if we find an active PID.

    if [ -n "$PID" ]; then
       echo "repmgr already running"
       return
    fi

    # A missing configuration file is a fatal error. Exit with status 1
    # if this is the case.

    if [ ! -f $SVC_CONF ]; then
       echo "Can not find required config file: $SVC_CONF"
       exit 1
    fi

    # Attempt to start the service. Capture output in the log we set up
    # earlier in the script.

    su $SVC_USER -c "$SVC_CMD $EXTRA_OPTS &>$SVC_LOG"
    rc=$?

    PID=$(get_pid)

    # If the start command didn't work, or the service died for some other
    # reason, the start process failed. Otherwise, report success.

    if [ $rc != '0' ] || [ -z "$PID" ]; then
        echo "Could not start repmgr. Check $SVC_LOG."
        exit 1
    else
        echo "$NAME service started"
    fi
}

##
# Stop the repmgr service
#
# This stop function is fully LSB compliant. Exit codes are defined such
# that they are compatible with scripts that function based on exit codes.
#
stop()
{
    PID=$(get_pid)

    # No reason to stop the service or perform any other checks if it's
    # not even running. Exit with status 0 if we don't find an active PID.

    if [ -z "$PID" ]; then
       echo "$NAME not running"
       return
    fi

    # We know the service is running at this point. We need to attempt to
    # stop it. That may not work, so we need to return status 1 if that
    # fails.

    kill -INT $PID
    sleep 1
    rc=$?

    PID=$(get_pid)

    if [ $rc = '0' ] && [ -z "$PID" ]; then
        echo "$NAME service stopped"
    else
        echo "Could not stop $NAME. Check $SVC_LOG"
        exit 1
    fi
}

##
# Restart the repmgr service
#
# This start function is fully LSB compliant. Exit codes are defined such
# that they are compatible with scripts that function based on exit codes.
#
restart()
{
    PID=$(get_pid)

    # For restart to be fully compliant, it should attempt to start a stopped
    # service. Thus we can't just call stop if the service isn't running, as
    # that would exit the process prematurely. Only call stop if repmgr is
    # actually running.

    if [ -n "$PID" ]; then
       stop
       sleep 1
    fi

    start
}

##
# Reload repmgr configuration files
#
# This reload function is fully LSB compliant. Exit codes are defined such
# that they are compatible with scripts that function based on exit codes.
#
reload()
{
    PID=$(get_pid)

    # No reason to reload config files if it's not even running.
    # Exit with status 0 if we don't find an active PID.

    if [ -z "$PID" ]; then
       echo "$NAME not running"
       return
    fi

    # We know the service is running at this point. We need to attempt to
    # reload config files. That may not work, so we need to return status
    # 1 if that fails.

    kill -HUP $PID
    rc=$?

    if [ $rc != '0' ]; then
        echo "Could not reload $NAME config files. Check $SVC_LOG"
        exit 1
    else
        echo "Reloaded $NAME configuration files"
    fi
}

##
# Check status of repmgr
#
# This reload function is fully LSB compliant. Exit codes are defined such
# that they are compatible with scripts that function based on exit codes.
#
# Status checks are something of a special case and have no error state.
# Either the service is running, or it is not. This corresponds to state
# 0 for running, or 3 for not running.
#
status()
{
    PID=$(get_pid);

    if [ -z "$PID" ]; then
        echo "$NAME not running"
        exit 3
    else
        echo "$NAME is running (PID: $PID)"
    fi
}

#########################
# Process Control Section
#########################

case "$1" in
  start|stop|restart|reload|status)
        $1
        ;;
  try-restart)
        exit 3  # Not implemented.
        ;;
  force-reload)
        reload
        ;;
  *)
        echo $"Usage: $0 {start|stop|restart|reload|status}"
        exit 2
esac

# Theoretically all error exit conditions have been handled. In that case,
# the default status of this script should be "success" status of 0.

exit 0

